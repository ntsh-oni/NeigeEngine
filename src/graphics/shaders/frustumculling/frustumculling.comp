#version 460

layout(local_size_x = 64) in;

struct DrawIndirect {
	uint indexCount;
	uint instanceCount;
	uint firstIndex;
	int vertexOffset;
	int firstInstance;
};

struct PerDraw {
	int materialIndex;
	float alphaCutoff;
};

struct AABB {
	vec3 min;
	vec3 max;
};

// Read only
layout(set = 0, binding = 0) uniform InModelMatrix {
	mat4 modelMatrix;
} iMM;

layout(set = 0, binding = 1) uniform InFrustum {
	vec4 frustum[6];
} iF;

layout(set = 1, binding = 0) restrict readonly buffer InDrawIndirect {
	DrawIndirect drawIndirect[];
} iDI;

layout(set = 1, binding = 1) restrict readonly buffer InPerDraw {
	PerDraw perDraw[];
} iPerDraw;

layout(set = 1, binding = 2) restrict readonly buffer InAABB {
	AABB aabb[];
} iAABB;

layout(push_constant) uniform DrawCount {
	uint drawCount;
} iDC;

// Write
layout(set = 0, binding = 2) restrict writeonly buffer OutDrawIndirect {
	DrawIndirect drawIndirect[];
} oDI;

layout(set = 0, binding = 3) restrict writeonly buffer OutPerDraw {
	PerDraw perDraw[];
} oPerDraw;

layout(set = 0, binding = 4) buffer OutDrawCount {
	uint drawCount;
} oDC;

bool collision(vec3 aabbMin, vec3 aabbMax) {
	vec3 mmm = vec3(aabbMin.x, aabbMin.y, aabbMin.z);
	vec3 Mmm = vec3(aabbMax.x, aabbMin.y, aabbMin.z);
	vec3 mMm = vec3(aabbMin.x, aabbMax.y, aabbMin.z);
	vec3 MMm = vec3(aabbMax.x, aabbMax.y, aabbMin.z);
	vec3 mmM = vec3(aabbMin.x, aabbMin.y, aabbMax.z);
	vec3 MmM = vec3(aabbMax.x, aabbMin.y, aabbMax.z);
	vec3 mMM = vec3(aabbMin.x, aabbMax.y, aabbMax.z);
	vec3 MMM = vec3(aabbMax.x, aabbMax.y, aabbMax.z);
	for (int i = 0; i < 6; i++) {
		if (((dot(iF.frustum[i].xyz, mmm) + iF.frustum[i].w) <= 0.0f)
			&& ((dot(iF.frustum[i].xyz, Mmm) + iF.frustum[i].w) <= 0.0f)
			&& ((dot(iF.frustum[i].xyz, mMm) + iF.frustum[i].w) <= 0.0f)
			&& ((dot(iF.frustum[i].xyz, MMm) + iF.frustum[i].w) <= 0.0f)
			&& ((dot(iF.frustum[i].xyz, mmM) + iF.frustum[i].w) <= 0.0f)
			&& ((dot(iF.frustum[i].xyz, MmM) + iF.frustum[i].w) <= 0.0f)
			&& ((dot(iF.frustum[i].xyz, mMM) + iF.frustum[i].w) <= 0.0f)
			&& ((dot(iF.frustum[i].xyz, MMM) + iF.frustum[i].w) <= 0.0f)) {
			return false;
		}
	}

	return true;
}

void main() {
	uint dI = gl_GlobalInvocationID.x;
	
	if (dI >= iDC.drawCount) {
		return;
	}
	
	vec3 mmm = vec3(iAABB.aabb[dI].min.x, iAABB.aabb[dI].min.y, iAABB.aabb[dI].min.z);
	vec3 Mmm = vec3(iAABB.aabb[dI].max.x, iAABB.aabb[dI].min.y, iAABB.aabb[dI].min.z);
	vec3 mMm = vec3(iAABB.aabb[dI].min.x, iAABB.aabb[dI].max.y, iAABB.aabb[dI].min.z);
	vec3 MMm = vec3(iAABB.aabb[dI].max.x, iAABB.aabb[dI].max.y, iAABB.aabb[dI].min.z);
	vec3 mmM = vec3(iAABB.aabb[dI].min.x, iAABB.aabb[dI].min.y, iAABB.aabb[dI].max.z);
	vec3 MmM = vec3(iAABB.aabb[dI].max.x, iAABB.aabb[dI].min.y, iAABB.aabb[dI].max.z);
	vec3 mMM = vec3(iAABB.aabb[dI].min.x, iAABB.aabb[dI].max.y, iAABB.aabb[dI].max.z);
	vec3 MMM = vec3(iAABB.aabb[dI].max.x, iAABB.aabb[dI].max.y, iAABB.aabb[dI].max.z);
	
	vec3 mmmTransformed = vec3(iMM.modelMatrix * vec4(mmm, 1.0));
	vec3 MmmTransformed = vec3(iMM.modelMatrix * vec4(Mmm, 1.0));
	vec3 mMmTransformed = vec3(iMM.modelMatrix * vec4(mMm, 1.0));
	vec3 MMmTransformed = vec3(iMM.modelMatrix * vec4(MMm, 1.0));
	vec3 mmMTransformed = vec3(iMM.modelMatrix * vec4(mmM, 1.0));
	vec3 MmMTransformed = vec3(iMM.modelMatrix * vec4(MmM, 1.0));
	vec3 mMMTransformed = vec3(iMM.modelMatrix * vec4(mMM, 1.0));
	vec3 MMMTransformed = vec3(iMM.modelMatrix * vec4(MMM, 1.0));
	
	vec3 aabbMin;
	aabbMin.x = min(mmmTransformed.x, min(MmmTransformed.x, min(mMmTransformed.x, min(MMmTransformed.x, min(mmMTransformed.x, min(MmMTransformed.x, min(mMMTransformed.x, MMMTransformed.x)))))));
	aabbMin.y = min(mmmTransformed.y, min(MmmTransformed.y, min(mMmTransformed.y, min(MMmTransformed.y, min(mmMTransformed.y, min(MmMTransformed.y, min(mMMTransformed.y, MMMTransformed.y)))))));
	aabbMin.z = min(mmmTransformed.z, min(MmmTransformed.z, min(mMmTransformed.z, min(MMmTransformed.z, min(mmMTransformed.z, min(MmMTransformed.z, min(mMMTransformed.z, MMMTransformed.z)))))));
	
	vec3 aabbMax;
	aabbMax.x = max(mmmTransformed.x, max(MmmTransformed.x, max(mMmTransformed.x, max(MMmTransformed.x, max(mmMTransformed.x, max(MmMTransformed.x, max(mMMTransformed.x, MMMTransformed.x)))))));
	aabbMax.y = max(mmmTransformed.y, max(MmmTransformed.y, max(mMmTransformed.y, max(MMmTransformed.y, max(mmMTransformed.y, max(MmMTransformed.y, max(mMMTransformed.y, MMMTransformed.y)))))));
	aabbMax.z = max(mmmTransformed.z, max(MmmTransformed.z, max(mMmTransformed.z, max(MMmTransformed.z, max(mmMTransformed.z, max(MmMTransformed.z, max(mMMTransformed.z, MMMTransformed.z)))))));
	
	if (collision(aabbMin, aabbMax)) {
		uint dCI = atomicAdd(oDC.drawCount, 1);
		
		oDI.drawIndirect[dCI].indexCount = iDI.drawIndirect[dI].indexCount;
		oDI.drawIndirect[dCI].instanceCount = iDI.drawIndirect[dI].instanceCount;
		oDI.drawIndirect[dCI].firstIndex = iDI.drawIndirect[dI].firstIndex;
		oDI.drawIndirect[dCI].vertexOffset = iDI.drawIndirect[dI].vertexOffset;
		oDI.drawIndirect[dCI].firstInstance = iDI.drawIndirect[dI].firstInstance;
		
		oPerDraw.perDraw[dCI].materialIndex = iPerDraw.perDraw[dI].materialIndex; 
		oPerDraw.perDraw[dCI].alphaCutoff = iPerDraw.perDraw[dI].alphaCutoff; 
	}
}